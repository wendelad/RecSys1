Use the style guide when it helps, ignore it when it's in the way. --Guido van Rossum
----
We use a blending of guidelines that are used in the C# and Java communities.
We apologize to both camps for this heresy.

Naming
1. Class, interface, method and property names are written in CamelCase.
2. Interface names have a preceding 'I'.
3. Enum values are written in UPPER_CASE.
4. Namespace names below MyMedia are written in lower_case.
5. Field variables, local variables, and method parameters are written in
   lower_case.

Properties
6. It is okay to define simple properties in one line.

Using
7. 'using' declarations start with the 'System' namespaces, followed by all
   other namespaces. Those two groups of declarations are internally sorted
   by alphabet.
8. After the 'using' declarations, there is one empty line.

Class definitions
9. One file per externally used class

Methods
10. Prefer interface types for method arguments and return types.

Spacing
11. There must be a space between if, for(each), while and the next parenthesis.
12. There is no space between a method name and the parenthesis.
13. There must be spaces around binary operators like =, +, /, +=, ==, etc.
14. There are no spaces between unary operators like ++, --, etc and the variable
    they modify.
15. There is no space between the datatype and the [] in array declarations.
16. Use a space (or newline) after a comma, semicolon, or curly brace.
17. Use tabs for indentation. It's the year 2012, your editor should be able to
    deal with that.

Curly braces
16. Do not use curly braces for simple if, for(each), and while statements.
17. Use a newline before the opening curly brace of a namespace, a class definition,
    a method definition, a property definition, or an if statement or a loop.
18. Opening curly braces of getters and setters are in the same line as 'get' and 'set'.

Specific standards for ordering (in argument lists, data formats)
a. user_id, item_id, rating, date/time
b. training_data, test_data
c. row, column, value
d. min, max

Unit tests
19. Every class should have a unit test collection called ClassTest.
20. Every method and every property of a class should have a unit test called
    ClassTest.(Method|Property)Test.

TODO: add more, discuss, group
